apiVersion: v1
kind: Namespace
metadata:
  name: pogokwetter
  labels:
    name: pogokwetter
---
apiVersion: v1
kind: Service
metadata:
  name: pokemon-gateway
  namespace: pogokwetter
  labels:
    app: pokemon-gateway
    tier: backend
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 8080
  selector:
    app: pokemon-gateway
    tier: backend
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pokemon-gateway
  namespace: pogokwetter
spec:
  selector:
    matchLabels:
      app: pokemon-gateway
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: pokemon-gateway
        tier: backend
    spec:
      containers:
        - name: pokemon-gateway
          image: ghcr.io/teunbuis-semester6-pogokwetter/pokemon-gateway:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: pokemon-service
  namespace: pogokwetter
  labels:
    app: pokemon-service
    tier: backend
spec:
  ports:
    - port: 8081
      targetPort: 8081
  selector:
    app: pokemon-service
    tier: backend
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pokemon-service
  namespace: pogokwetter
spec:
  selector:
    matchLabels:
      app: pokemon-service
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: pokemon-service
        tier: backend
    spec:
      containers:
        - name: pokemon-service
          image: docker.io/teunbuis/pogokwetter:pokemon-service
          imagePullPolicy: Always
          ports:
            - containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: pokemonwrite-service
  namespace: pogokwetter
  labels:
    app: pokemonwrite-service
    tier: backend
spec:
  ports:
    - port: 8086
      targetPort: 8086
  selector:
    app: pokemonwrite-service
    tier: backend
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: pokemonread-service
  namespace: pogokwetter
  labels:
    app: pokemonread-service
    tier: backend
spec:
  ports:
    - port: 8085
      targetPort: 8085
  selector:
    app: pokemonread-service
    tier: backend
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pokemonread-service
  namespace: pogokwetter
spec:
  selector:
    matchLabels:
      app: pokemonread-service
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: pokemonread-service
        tier: backend
    spec:
      containers:
        - name: pokemonread-service
          image: ghcr.io/teunbuis-semester6-pogokwetter/pokemonread-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pokemonwrite-service
  namespace: pogokwetter
spec:
  selector:
    matchLabels:
      app: pokemonwrite-service
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: pokemonwrite-service
        tier: backend
    spec:
      containers:
        - name: pokemonwrite-service
          image: ghcr.io/teunbuis-semester6-pogokwetter/pokemonwrite-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8086
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: pogokwetter
  labels:
    app: user-service
    tier: backend
spec:
  ports:
    - port: 8082
      targetPort: 8082
  selector:
    app: user-service
    tier: backend
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: pogokwetter
spec:
  selector:
    matchLabels:
      app: user-service
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: user-service
        tier: backend
    spec:
      containers:
        - name: user-service
          image: ghcr.io/teunbuis-semester6-pogokwetter/user-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8082
---
apiVersion: v1
kind: Service
metadata:
  name: pokemonimg-mysql
  namespace: pogokwetter
  labels:
    app: pokemonimng-mysql
    tier: backend
spec:
  selector:
    app: pokemonimng-mysql
  ports:
    - protocol: TCP
      name: "3307"
      port: 3307
      targetPort: 3307
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pokemonimng-mysql
  namespace: pogokwetter
spec:
  selector:
    matchLabels:
      app: pokemonimng-mysql
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: pokemonimng-mysql
        tier: backend
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          ports:
            - containerPort: 3307
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: Teun
            - name: MYSQL_TCP_PORT
              value: "3307"
            - name: MYSQL_DATABASE
              value: pokemonimg
---
apiVersion: v1
kind: Service
metadata:
  name: user-mysql
  namespace: pogokwetter
  labels:
    app: user-mysql
    tier: backend
spec:
  selector:
    app: user-mysql
  ports:
    - protocol: TCP
      name: "3308"
      port: 3308
      targetPort: 3308
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-mysql
  namespace: pogokwetter
spec:
  selector:
    matchLabels:
      app: user-mysql
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: user-mysql
        tier: backend
    spec:
      containers:
        - name: user-mysql
          image: mysql:latest
          ports:
            - containerPort: 3308
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: Teun
            - name: MYSQL_TCP_PORT
              value: "3308"
            - name: MYSQL_DATABASE
              value: user
---
apiVersion: v1
kind: Service
metadata:
  name: rabbit-mq
  namespace: pogokwetter
  labels:
    app: pokemon-redis
    tier: backend
spec:
  selector:
    app: rabbit-mq
  ports:
    - name: amqp
      port: 5672
      targetPort: 5672
    - name: management
      port: 15672
      targetPort: 15672
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbit-mq
  namespace: pogokwetter
spec:
  selector:
    matchLabels:
      app: rabbit-mq
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: rabbit-mq
        tier: backend
    spec:
      containers:
        - name: rabbit-mq
          image: rabbitmq:latest
          ports:
            - containerPort: 5672
              name: amqp
            - containerPort: 15672
              name: management
          env:
            - name: RABBITMQ_DEFAULT_PASS
              value: password
            - name: RABBITMQ_DEFAULT_USER
              value: user
---
apiVersion: v1
kind: Service
metadata:
  name: pokemon-redis
  namespace: pogokwetter
  labels:
    app: pokemon-redis
    tier: backend
spec:
  selector:
    app: pokemon-redis
    tier: backend
  ports:
    - protocol: TCP
      name: "6379"
      port: 6379
      targetPort: 6379
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pokemon-redis
  namespace: pogokwetter
spec:
  selector:
    matchLabels:
      app: pokemon-redis
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: pokemon-redis
        tier: backend
    spec:
      containers:
        - name: pokemon-redis
          image: redis:latest
          args:
            - redis-server
            - --requirepass
            - Teun
          ports:
            - containerPort: 6379